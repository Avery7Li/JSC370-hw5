{
    "type": [
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.1.2 (2021-11-01) -- \"Bird Hippie\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin17.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "players <- data.table::fread(\"../data/players.csv\")",
        "Error in data.table::fread(\"../data/players.csv\") : \n  File '../data/players.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "In addition: ",
        "Warning messages:\n",
        "1: ",
        "In readLines(index, encoding = encoding) :",
        "\n ",
        " incomplete final line found on '/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5/index.Rmd'\n",
        "2: ",
        "In readLines(index, encoding = encoding) :",
        "\n ",
        " incomplete final line found on '/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5/index.Rmd'\n",
        "> ",
        "players <- data.table::fread(\"data/players.csv\")",
        "> ",
        "players <- data.table::fread(\"data/players.csv\")",
        "> ",
        "",
        "> ",
        "player_rank <- data.table::fread(\"data/player_rank.csv\")",
        "> ",
        "team_rank <- data.table::fread(\"data/team_rank.csv\")",
        "> ",
        "team_in_order <- team_rank[, team_full]",
        "> ",
        "team_abr_in_order <- team_rank[, team]",
        "> ",
        "team_abr_in_order",
        " [1] \"CHN\" \"USA\" \"BRA\" \"ITA\" \"TUR\" \"POL\" \"BEL\" \"DOM\" \"JPN\" \"GER\" \"NED\" \"THA\" \"SRB\"\n[14] \"RUS\" \"KOR\" \"BUL\"\n",
        "> ",
        "players <- merge(x=players,",
        "+ ",
        "                 y=team_rank[, .(team, team_full)], by='team')",
        "Error in parse(text = code, keep.source = FALSE) : \n  <text>:1:10: unexpected symbol\n1: toc:TRUE toc_float\n             ^\n",
        "> ",
        "transform(players,",
        "+ ",
        "          team_full=factor(team_full, levels=team_in_order))%>%",
        "+ ",
        "  plot_ly(y=~age, color=~team_full, type=\"box\") %>%",
        "+ ",
        "  layout(title= \"Player Ages in the Teams\",",
        "+ ",
        "         yaxis = list(title=\"Age\"),",
        "+ ",
        "         xaxis = list(title=\"Team\"),",
        "+ ",
        "         hovermode=\"compare\")",
        "Error in transform(players, team_full = factor(team_full, levels = team_in_order)) %>%  : \n  could not find function \"%>%\"\n",
        "> ",
        "library(data.table)",
        "data.table 1.14.2 using 1 threads (see ?getDTthreads).  Latest news: r-datatable.com\n",
        "**********\nThis installation of data.table has not detected OpenMP support. It should still work but in single-threaded mode.\nThis is a Mac. Please read https://mac.r-project.org/openmp/. Please engage with Apple and ask them for support. Check r-datatable.com for updates, and our Mac instructions here: https://github.com/Rdatatable/data.table/wiki/Installation. After several years of many reports of installation problems on Mac, it's time to gingerly point out that there have been no similar problems on Windows or Linux.\n**********\n",
        "> ",
        "library(dplyr)",
        "\nAttaching package: ‘dplyr’\n\n",
        "The following objects are masked from ‘package:data.table’:\n\n    between, first, last\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n",
        "The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "> ",
        "library(leaflet)",
        "Registered S3 method overwritten by 'htmlwidgets':\n  method           from         \n  print.htmlwidget tools:rstudio\n",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(gridExtra)",
        "\nAttaching package: ‘gridExtra’\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    combine\n\n",
        "> ",
        "library(grid)",
        "> ",
        "library(gtable)",
        "> ",
        "library(mgcv)",
        "Loading required package: nlme\n",
        "\nAttaching package: ‘nlme’\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    collapse\n\n",
        "This is mgcv 1.8-38. For overview type 'help(\"mgcv-package\")'.\n",
        "> ",
        "library(kableExtra)",
        "\nAttaching package: ‘kableExtra’\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    group_rows\n\n",
        "> ",
        "library(\"GGally\")",
        "Registered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n",
        "> ",
        "library(AICcmodavg)",
        "> ",
        "library(plotly)",
        "\nAttaching package: ‘plotly’\n\n",
        "The following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\n",
        "The following object is masked from ‘package:stats’:\n\n    filter\n\n",
        "The following object is masked from ‘package:graphics’:\n\n    layout\n\n",
        "> ",
        "library(widgetframe)",
        "Loading required package: htmlwidgets\n",
        "> ",
        "library(knitr)",
        "> ",
        "",
        "> ",
        "opts_chunk$set(",
        "+ ",
        "  warning = FALSE,",
        "+ ",
        "  message = FALSE,",
        "+ ",
        "  eval=TRUE,",
        "+ ",
        "  echo = FALSE,",
        "+ ",
        "  cache=FALSE,",
        "+ ",
        "  include=TRUE)",
        "> ",
        "players <- data.table::fread(\"data/players.csv\")",
        "> ",
        "",
        "> ",
        "player_rank <- data.table::fread(\"data/player_rank.csv\")",
        "> ",
        "team_rank <- data.table::fread(\"data/team_rank.csv\")",
        "> ",
        "team_in_order <- team_rank[, team_full]",
        "> ",
        "team_abr_in_order <- team_rank[, team]",
        "> ",
        "team_abr_in_order",
        " [1] \"CHN\" \"USA\" \"BRA\" \"ITA\" \"TUR\" \"POL\" \"BEL\" \"DOM\" \"JPN\" \"GER\"\n[11] \"NED\" \"THA\" \"SRB\" \"RUS\" \"KOR\" \"BUL\"\n",
        "> ",
        "players <- merge(x=players,",
        "+ ",
        "                 y=team_rank[, .(team, team_full)], by='team')",
        "> ",
        "#library(\"RColorBrewer\")",
        "> ",
        "#players <- mutate(players, players.col = factor(position, label = brewer.pal(n = 5, name = \"Set2\")))",
        "> ",
        "players <- mutate(players, players.col = factor(position, label = c(\"red\", \"yellow\", \"green\", \"blue\", \"orange\")))",
        "> ",
        "",
        "> ",
        "players %>%",
        "+ ",
        "  plot_ly(x= ~spike_height, y=~total_score, type=\"scatter\", mode=\"markers\", size=~total_selections, sizes=c(5, 70), marker=list(color=~players.col, sizemode='diameter', opacity=0.5),",
        "+ ",
        "          hover_info =\"text\", text = ~paste(paste0(\"Name: \", name),",
        "+ ",
        "                                            paste0(\"Team: \", team),",
        "+ ",
        "                                            paste0(\"Position: \", position),",
        "+ ",
        "                                            paste0(\"Total Selections: \", total_selections),",
        "+ ",
        "                                            ",
        "+ ",
        "                                            sep = \"<br>\"),",
        "+ ",
        "          transforms = list(",
        "+ ",
        "            list(",
        "+ ",
        "              type = 'filter',",
        "+ ",
        "              target = ~team,",
        "+ ",
        "              operation = 'in',",
        "+ ",
        "              value = team_abr_in_order",
        "+ ",
        "            ))",
        "+ ",
        "          ) %>%",
        "+ ",
        "  layout(title= \"Scatterplots of Total Score vs Spike Height\",",
        "+ ",
        "         yaxis = list(title=\"Total Score\"),",
        "+ ",
        "         xaxis = list(title=\"Spike Height\"),",
        "+ ",
        "         hovermode=\"compare\",",
        "+ ",
        "         updatemenus = list(",
        "+ ",
        "          list(",
        "+ ",
        "            y = 0.8,",
        "+ ",
        "            buttons = list(",
        "+ ",
        "              #list(method = \"restyle\",",
        "+ ",
        "              #     args = list(\"transforms[0].value\", list(team_abr_in_order)),",
        "+ ",
        "              #     label = \"ALL\"),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[1]),",
        "+ ",
        "                   label = paste0(\"1. \", team_in_order[1])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[2]),",
        "+ ",
        "                   label = paste0(\"2. \", team_in_order[2])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[3]),",
        "+ ",
        "                   label = paste0(\"3. \", team_in_order[3])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[4]),",
        "+ ",
        "                   label = paste0(\"4. \", team_in_order[4])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[5]),",
        "+ ",
        "                   label = paste0(\"5. \", team_in_order[5])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[6]),",
        "+ ",
        "                   label = paste0(\"6. \", team_in_order[6])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[7]),",
        "+ ",
        "                   label = paste0(\"7. \", team_in_order[7])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[8]),",
        "+ ",
        "                   label = paste0(\"8. \", team_in_order[8])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[9]),",
        "+ ",
        "                   label = paste0(\"9. \", team_in_order[9])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[10]),",
        "+ ",
        "                   label = paste0(\"10. \", team_in_order[10])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[11]),",
        "+ ",
        "                   label = paste0(\"11. \", team_in_order[11])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[12]),",
        "+ ",
        "                   label = paste0(\"12. \", team_in_order[12])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[13]),",
        "+ ",
        "                   label = paste0(\"13. \", team_in_order[13])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[14]),",
        "+ ",
        "                   label = paste0(\"14. \", team_in_order[14])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[15]),",
        "+ ",
        "                   label = paste0(\"15. \", team_in_order[15])),",
        "+ ",
        "              list(method = \"restyle\",",
        "+ ",
        "                   args = list(\"transforms[0].value\", team_abr_in_order[16]),",
        "+ ",
        "                   label = paste0(\"16. \", team_in_order[16])))))",
        "+ ",
        "    )",
        "> ",
        "scatter_top_player <- transform(player_rank,",
        "+ ",
        "          team_full=factor(team_full, levels=rev(team_in_order)))[rank <= 10] %>%",
        "+ ",
        "  ggplot(aes(x=rank, y=team_full, shape=position, color=skill)) + ",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  scale_x_continuous(breaks=seq(1,10))+",
        "+ ",
        "  theme_light() +",
        "+ ",
        "  guides(size=\"none\") +",
        "+ ",
        "  #theme(axis.ticks.y=paste(rank_all$team_rank, rank_all$team_full))",
        "+ ",
        "  scale_color_brewer(palette = \"Set2\") +",
        "+ ",
        "  labs(title=\"Composition of Top 10 Players with 4 Tactical Skills By Teams\", ",
        "+ ",
        "       x=\"Player Skill Rank\", y=\"Team\")",
        "> ",
        "ggplotly(scatter_top_player)",
        "> ",
        "transform(players,",
        "+ ",
        "          team_full=factor(team_full, levels=team_in_order))%>%",
        "+ ",
        "  plot_ly(y=~age, color=~team_full, type=\"box\") %>%",
        "+ ",
        "  layout(title= \"Player Ages in the Teams\",",
        "+ ",
        "         yaxis = list(title=\"Age\"),",
        "+ ",
        "         xaxis = list(title=\"Team\"),",
        "+ ",
        "         hovermode=\"compare\")",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "> ",
        "  ",
        "> ",
        "players",
        "> ",
        "transform(players,",
        "+ ",
        "          team_full=factor(team_full, levels=team_in_order))%>%",
        "+ ",
        "  plot_ly(y=~total_selections, color=~team_full, type=\"box\") %>%",
        "+ ",
        "  layout(title= \"Player Number of Selections\",",
        "+ ",
        "         yaxis = list(title=\"Age\"),",
        "+ ",
        "         xaxis = list(title=\"Team\"),",
        "+ ",
        "         hovermode=\"compare\")",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "Warning in RColorBrewer::brewer.pal(N, \"Set2\") :",
        "\n ",
        " n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n",
        "> ",
        "  ",
        "Error in parse(text = code, keep.source = FALSE) : \n  <text>:1:10: unexpected symbol\n1: toc:TRUE toc_float\n             ^\n",
        "Error in parse(text = code, keep.source = FALSE) : \n  <text>:1:10: unexpected symbol\n1: toc:TRUE toc_float\n             ^\n",
        "> ",
        "matches <- data.table::fread(\"data/round_robin.csv\")",
        "> ",
        "library(stringr)",
        "> ",
        "matches",
        "> ",
        "matches$team_home <- sapply(strsplit(as.character(matches$teams),'-'), \"[\", 1)",
        "> ",
        "matches",
        "     number       date   teams sets set1_point set2_point set3_point set4_point set5_point  pionts  time audience\n  1:      3 21/05/2019 BEL-USA  0-3      23-25       8-25      22-25          -          -   53-75 01:20      650\n  2:      7 21/05/2019 KOR-TUR  0-3      15-25      26-28      19-25          -          -   60-78 01:25      450\n  3:      5 21/05/2019 DOM-RUS  3-1      25-21      22-25      25-18      28-26          -  100-90 02:12     1542\n  4:      1 21/05/2019 THA-GER  3-0      26-24      25-19",
        "      25-22          -          -   76-65 01:21      652\n  5:      8 21/05/2019 SRB-NED  3-0      25-15      25-22      25-19          -          -   75-56 01:18     4165\n ---                                                                                                             \n116:    113 20/06/2019 BEL-ITA  3-2      12-25      25-20      16-25      25-14      15-10   93-94 01:44      870\n117:    120 20/06/2019 KOR-POL  3-1       25-8      22-25      25-20      25-16          -   97-69 01:43     2950",
        "\n118:    114 20/06/2019 TUR-BRA  3-2      25-23      24-26      25-20      23-25      16-14 113-108 02:30     5320\n119:    118 20/06/2019 RUS-NED  0-3      12-25      25-27      17-25          -          -   54-77 01:19     4710\n120:    116 20/06/2019 CHN-SRB  3-0      25-16      25-17      25-17          -          -   75-50 01:11     7780\n     team_home\n  1:       BEL\n  2:       KOR\n  3:       DOM\n  4:       THA\n  5:       SRB\n ---          \n116:       BEL\n117:       KOR\n118:       TUR\n119:       RUS\n120:",
        "       CHN\n",
        "> ",
        "matches$set_home_win <- matches$set_home - matches$set_away",
        "> ",
        "matches$set_away_win <- matches$set_away - matches$set_home",
        "> ",
        "matches",
        "     number       date   teams sets set1_point set2_point set3_point set4_point set5_point  pionts  time audience\n  1:      3 21/05/2019 BEL-USA  0-3      23-25       8-25      22-25          -          -   53-75 01:20      650\n  2:      7 21/05/2019 KOR-TUR  0-3      15-25      26-28      19-25          -          -   60-78 01:25      450\n  3:      5 21/05/2019 DOM-RUS  3-1      25-21      22-25      25-18      28-26          -  100-90 02:12     1542\n  4:      1 21/05/2019 THA-GER  3-0      26-24      25-19",
        "      25-22          -          -   76-65 01:21      652\n  5:      8 21/05/2019 SRB-NED  3-0      25-15      25-22      25-19          -          -   75-56 01:18     4165\n ---                                                                                                             \n116:    113 20/06/2019 BEL-ITA  3-2      12-25      25-20      16-25      25-14      15-10   93-94 01:44      870\n117:    120 20/06/2019 KOR-POL  3-1       25-8      22-25      25-20      25-16          -   97-69 01:43     2950",
        "\n118:    114 20/06/2019 TUR-BRA  3-2      25-23      24-26      25-20      23-25      16-14 113-108 02:30     5320\n119:    118 20/06/2019 RUS-NED  0-3      12-25      25-27      17-25          -          -   54-77 01:19     4710\n120:    116 20/06/2019 CHN-SRB  3-0      25-16      25-17      25-17          -          -   75-50 01:11     7780\n     team_home set_home_win set_away_win\n  1:       BEL           NA           NA\n  2:       KOR           NA           NA\n  3:       DOM           NA           NA\n  4:       THA",
        "           NA           NA\n  5:       SRB           NA           NA\n ---                                    \n116:       BEL           NA           NA\n117:       KOR           NA           NA\n118:       TUR           NA           NA\n119:       RUS           NA           NA\n120:       CHN           NA           NA\n",
        "> ",
        "matches$team_home <- sapply(strsplit(as.character(matches$teams),'-'), \"[\", 1)",
        "> ",
        "matches$team_away <- sapply(strsplit(as.character(matches$teams),'-'), \"[\", 2)",
        "> ",
        "matches$set_home <- sapply(strsplit(as.character(matches$sets),'-'), \"[\", 1)",
        "> ",
        "matches$set_away <- sapply(strsplit(as.character(matches$sets),'-'), \"[\", 2)",
        "> ",
        "matches$set_home_win <- matches$set_home - matches$set_away",
        "Error in matches$set_home - matches$set_away : \n  non-numeric argument to binary operator\n",
        "> ",
        "m <- matches[, .(team_home=sapply(strsplit(as.character(matches$teams),'-'), \"[\", 1))]",
        "> ",
        "m",
        "     team_home\n  1:       BEL\n  2:       KOR\n  3:       DOM\n  4:       THA\n  5:       SRB\n ---          \n116:       BEL\n117:       KOR\n118:       TUR\n119:       RUS\n120:       CHN\n",
        "> ",
        "library(dplyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(data.table)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(gridExtra)",
        "> ",
        "library(grid)",
        "> ",
        "library(gtable)",
        "> ",
        "library(mgcv)",
        "> ",
        "library(kableExtra)",
        "> ",
        "library(\"GGally\")",
        "> ",
        "library(AICcmodavg)",
        "> ",
        "",
        "> ",
        "# Helper functions",
        "> ",
        "# Slice from end of the string",
        "> ",
        "slice_back <- function(s, n) {",
        "+ ",
        "  sub = substr(s, nchar(s)-n+1, nchar(s))",
        "+ ",
        "  return(sub)",
        "+ ",
        "}",
        "> ",
        "# Mode",
        "> ",
        "fmode <- function(x) unique(x)[which.max(table(x))]",
        "> ",
        "",
        "> ",
        "# Position order constant",
        "> ",
        "position_levels <- c(\"Opposite Spiker\", \"Outside Hitter\", \"Middle Blocker\",",
        "+ ",
        "                     \"Setter\", \"Libero\")",
        "> ",
        "",
        "> ",
        "# Read in the player and team data",
        "> ",
        "scorers <- data.table::fread(\"vnl_2019/best-scorers.csv\")",
        "Error in data.table::fread(\"vnl_2019/best-scorers.csv\") : \n  File 'vnl_2019/best-scorers.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "spikers <- data.table::fread(\"vnl_2019/best-spikers.csv\")",
        "Error in data.table::fread(\"vnl_2019/best-spikers.csv\") : \n  File 'vnl_2019/best-spikers.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "diggers <- data.table::fread(\"vnl_2019/best-diggers.csv\")",
        "Error in data.table::fread(\"vnl_2019/best-diggers.csv\") : \n  File 'vnl_2019/best-diggers.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "setters <- data.table::fread(\"vnl_2019/best-setters.csv\")",
        "Error in data.table::fread(\"vnl_2019/best-setters.csv\") : \n  File 'vnl_2019/best-setters.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "receivers <- data.table::fread(\"vnl_2019/best-receivers.csv\")",
        "Error in data.table::fread(\"vnl_2019/best-receivers.csv\") : \n  File 'vnl_2019/best-receivers.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "",
        "> ",
        "blockers <- data.table::fread(\"vnl_2019/best-blockers.csv\")",
        "Error in data.table::fread(\"vnl_2019/best-blockers.csv\") : \n  File 'vnl_2019/best-blockers.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "",
        "> ",
        "bio <- data.table::fread(\"vnl_2019/player_bio.csv\")",
        "Error in data.table::fread(\"vnl_2019/player_bio.csv\") : \n  File 'vnl_2019/player_bio.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "team_rank <- data.table::fread(\"vnl_2019/team_rank.csv\")",
        "Error in data.table::fread(\"vnl_2019/team_rank.csv\") : \n  File 'vnl_2019/team_rank.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "round_robin <- data.table::fread(\"vnl_2019/round_robin.csv\")",
        "Error in data.table::fread(\"vnl_2019/round_robin.csv\") : \n  File 'vnl_2019/round_robin.csv' does not exist or is non-readable. getwd()=='/Users/zhengdan/Library/CloudStorage/OneDrive-UniversityofToronto/Documents/2022Winter/JSC370/Homework/hw5'\n",
        "> ",
        "",
        "> ",
        "## bio",
        "> ",
        "# Rename ambiguous columns before merging",
        "> ",
        "setnames(bio, 'spike', 'spike_height')",
        "Error in is.data.frame(x) : object 'bio' not found\n",
        "> ",
        "setnames(bio, 'block', 'block_height')",
        "Error in is.data.frame(x) : object 'bio' not found\n",
        "> ",
        "setnames(bio, 'total', 'total_selections')",
        "Error in is.data.frame(x) : object 'bio' not found\n",
        "> ",
        "",
        "> ",
        "# Deal with outliers",
        "> ",
        "boxplot(bio$spike_height, main='Boxplot of spike height')",
        "Error in boxplot(bio$spike_height, main = \"Boxplot of spike height\") : \n  object 'bio' not found\n",
        "> ",
        "bio[spike_height < 240]",
        "Error: object 'bio' not found\n",
        "> ",
        "nrow(bio[spike_height >= block_height]) / nrow(bio)",
        "Error in nrow(bio[spike_height >= block_height]) : object 'bio' not found\n",
        "> ",
        "bio[, spike_height := fifelse(spike_height < 150, block_height, spike_height)]",
        "Error: object 'bio' not found\n",
        "> ",
        "",
        "> ",
        "# Only one player has a universal position, replace with the most occurred position",
        "> ",
        "bio[position == 'Universal']",
        "Error: object 'bio' not found\n",
        "> ",
        "bio[, position := fifelse(position == 'Universal', fmode(position), position)]",
        "Error: object 'bio' not found\n",
        "> ",
        "",
        "> ",
        "# Make position name consistent",
        "> ",
        "bio[, position := fifelse(position == 'Middle blocker', ",
        "+ ",
        "                          'Middle Blocker', ",
        "+ ",
        "                          fifelse(position == 'Opposite spiker',",
        "+ ",
        "                                  'Opposite Spiker', position))]",
        "Error: object 'bio' not found\n",
        "> ",
        "",
        "> ",
        "## Create numerical variables - bmi, world_game, age",
        "> ",
        "bio[, bmi := round(weight / (height/100)**2, 1)]",
        "Error: object 'bio' not found\n",
        "> ",
        "bio[, world_selection := world_championships + olympic_games]",
        "Error: object 'bio' not found\n",
        "> ",
        "# Take the last four char from birth date and convert to int as birth year",
        "> ",
        "bio[, birth_year := strtoi(slice_back(birthdate, 4))]",
        "Error: object 'bio' not found\n",
        "> ",
        "# Calculate age",
        "> ",
        "bio[, age:= 2019 - birth_year]",
        "Error: object 'bio' not found\n",
        "> ",
        "# Create a indicator for captain: name has '\\nc' at the end",
        "> ",
        "bio[, is_captain := fifelse(slice_back(name, 2) == '\\nc', 1, 0)]",
        "Error: object 'bio' not found\n",
        "> ",
        "# Remove char from end of name",
        "> ",
        "bio[, name := gsub(\"\\nc\", \"\", name)]",
        "Error: object 'bio' not found\n",
        "> ",
        "# Keep only relevant columns",
        "> ",
        "",
        "> ",
        "## scorers",
        "> ",
        "# Rename columns",
        "> ",
        "setnames(scorers, 'total', 'total_score')",
        "Error in is.data.frame(x) : object 'scorers' not found\n",
        "> ",
        "setnames(scorers, 'rank', 'score_rank')",
        "Error in is.data.frame(x) : object 'scorers' not found\n",
        "> ",
        "# Drop column that's not interesting",
        "> ",
        "scorers <- scorers[, !\"shirtnumber\"]",
        "Error: object 'scorers' not found\n",
        "> ",
        "",
        "> ",
        "# Merge player scores with bio",
        "> ",
        "# look for association between players' individual scores and their ability",
        "> ",
        "players <- merge(x = bio[, .(name, team, position, age, height, weight, bmi,",
        "+ ",
        "                             spike_height, block_height,",
        "+ ",
        "                             total_selections, is_captain)], ",
        "+ ",
        "                 y = scorers, ",
        "+ ",
        "                 all.x = T, all.y = F, ",
        "+ ",
        "                 by=c(\"name\", 'team'))",
        "Error in merge(x = bio[, .(name, team, position, age, height, weight,  : \n  object 'bio' not found\n",
        "> ",
        "",
        "> ",
        "## Best players",
        "> ",
        "# Rename",
        "> ",
        "setnames(diggers, 'average_per_set', 'digs_per_set')",
        "Error in is.data.frame(x) : object 'diggers' not found\n",
        "> ",
        "setnames(setters, 'average_per_set', 'sets_per_set')",
        "Error in is.data.frame(x) : object 'setters' not found\n",
        "> ",
        "setnames(spikers, 'success_%', 'attack_success_rate')",
        "Error in is.data.frame(x) : object 'spikers' not found\n",
        "> ",
        "# Merge with player dataset",
        "> ",
        "players <- merge(x = players, ",
        "+ ",
        "                 y = diggers[, .(name, digs_per_set)],",
        "+ ",
        "                 all.x = T, all.y = F, ",
        "+ ",
        "                 by=\"name\")",
        "Error in is.data.table(y) : object 'diggers' not found\n",
        "> ",
        "players <- merge(x = players, ",
        "+ ",
        "                 y = setters[, .(name, sets_per_set)], ",
        "+ ",
        "                 all.x = T, all.y = F, ",
        "+ ",
        "                 by=\"name\")",
        "Error in is.data.table(y) : object 'setters' not found\n",
        "> ",
        "players <- merge(x = players, ",
        "+ ",
        "                 y = spikers[, .(name, attack_success_rate)], ",
        "+ ",
        "                 all.x = T, all.y = F, ",
        "+ ",
        "                 by=\"name\")",
        "Error in is.data.table(y) : object 'spikers' not found\n",
        "> ",
        "# Check row number doesn't change so no players have the same name",
        "> ",
        "print(nrow(players) == nrow(bio))",
        "Error in nrow(bio) : object 'bio' not found\n",
        "> ",
        "# Check for NAs",
        "> ",
        "players[is.na(digs_per_set) & is.na(sets_per_set) & ",
        "+ ",
        "          is.na(attack_success_rate) & is.na(total_score), .N]",
        "[1] 0\n",
        "> ",
        "players <- players[!(is.na(digs_per_set) & is.na(sets_per_set) & ",
        "+ ",
        "                       is.na(attack_success_rate) & is.na(total_score))]",
        "> ",
        "players[is.na(total_score), .N]   # 43",
        "[1] 0\n",
        "> ",
        "",
        "> ",
        "# Impute missing values",
        "> ",
        "players <- players %>%",
        "+ ",
        "  group_by(position) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    total_score = coalesce(total_score, round(mean(total_score, na.rm=TRUE))),",
        "+ ",
        "    digs_per_set = coalesce(digs_per_set, round(mean(digs_per_set, na.rm=TRUE))),",
        "+ ",
        "    sets_per_set = coalesce(sets_per_set, round(mean(sets_per_set, na.rm=TRUE)))",
        "+ ",
        "    #attack_success_rate = coalesce(attack_success_rate,",
        "+ ",
        "    #                               round(mean(attack_success_rate, na.rm=TRUE)))",
        "+ ",
        "  )",
        "> ",
        "players <-data.table(players)",
        "> ",
        "",
        "> ",
        "## Team",
        "> ",
        "# Rename team rank",
        "> ",
        "setnames(team_rank, 'rank', 'team_rank')",
        "> ",
        "# Merge team info together with player info",
        "> ",
        "team_players <- merge(x=team_rank[, .(team, team_rank, match_win, ",
        "+ ",
        "                                      set_ratio, team_full)], ",
        "+ ",
        "                      y=players[, .(name, team, age, position, height, ",
        "+ ",
        "                                    total_selections, total_score,",
        "+ ",
        "                                    digs_per_set, sets_per_set, ",
        "+ ",
        "                                    attack_success_rate)],",
        "+ ",
        "                      ",
        "+ ",
        "                      all.x = T, all.y = T, ",
        "+ ",
        "                      by='team')",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "## Top players",
        "> ",
        "rank_all <- rbind(spikers[, .(name, rank, skill = \"Attack\", value=attack_success_rate)],",
        "+ ",
        "                  setters[, .(name, rank, skill = \"Set\", value=sets_per_set)],",
        "+ ",
        "                  diggers[, .(name, rank, skill = \"Dig\", value=digs_per_set)],",
        "+ ",
        "                  #receivers[, .(name, rank, skill = \"Receive\", value=`efficiency_%`)],",
        "+ ",
        "                  blockers[, .(name, rank, skill = \"Block\", value=average_per_set)])",
        "Error in rbind(spikers[, .(name, rank, skill = \"Attack\", value = attack_success_rate)],  : \n  object 'spikers' not found\n",
        "> ",
        "rank_all <- merge(x=rank_all, ",
        "+ ",
        "                  y=bio[, .(team, name, position, is_captain)], ",
        "+ ",
        "                  all.x=T, all.y=F, by='name')",
        "Error in merge(x = rank_all, y = bio[, .(team, name, position, is_captain)],  : \n  object 'rank_all' not found\n",
        "> ",
        "rank_all <- merge(x=rank_all, ",
        "+ ",
        "                  y=team_rank[, .(team_rank, team_full, team)], ",
        "+ ",
        "                  all.x=T, all.y=F, by='team')",
        "Error in merge(x = rank_all, y = team_rank[, .(team_rank, team_full, team)],  : \n  object 'rank_all' not found\n",
        "> ",
        "pwd()",
        "Error in pwd() : could not find function \"pwd\"\n",
        "> ",
        "pwd",
        "Error: object 'pwd' not found\n",
        "> ",
        "matches_clean <- matches[, .(team_home=sapply(strsplit(as.character(matches$teams),'-'), \"[\", 1),",
        "+ ",
        "                 team_away=sapply(strsplit(as.character(matches$teams),'-'), \"[\", 2),",
        "+ ",
        "                 set_home=sapply(strsplit(as.character(matches$sets),'-'), \"[\", 1),",
        "+ ",
        "                 set_away=sapply(strsplit(as.character(matches$sets),'-'), \"[\", 2))]",
        "> ",
        "transform(matches_clean, set_home = as.numeric(set_home), ",
        "+ ",
        "               set_away = as.numeric(set_away))",
        "> ",
        "matches_clean",
        "     team_home team_away set_home set_away\n  1:       BEL       USA        0        3\n  2:       KOR       TUR        0        3\n  3:       DOM       RUS        3        1\n  4:       THA       GER        3        0\n  5:       SRB       NED        3        0\n ---                                      \n116:       BEL       ITA        3        2\n117:       KOR       POL        3        1\n118:       TUR       BRA        3        2\n119:       RUS       NED        0        3\n120:       CHN       SRB        3        0",
        "\n",
        "> ",
        "matches_clean <- matches_clean[, .(set_home_win=set_home-set_away)]",
        "Error in set_home - set_away : non-numeric argument to binary operator\n",
        "> ",
        "matches_clean$set_home_win <- matches_clean$set_home - matches_clean$set_away",
        "Error in matches_clean$set_home - matches_clean$set_away : \n  non-numeric argument to binary operator\n",
        "> ",
        "matches_clean$set_home",
        "  [1] \"0\" \"0\" \"3\" \"3\" \"3\" \"3\" \"1\" \"2\" \"3\" \"1\" \"1\" \"0\" \"1\" \"1\" \"2\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"0\" \"3\" \"0\" \"0\" \"1\" \"3\" \"0\" \"3\" \"2\" \"3\" \"3\"\n [34] \"1\" \"3\" \"3\" \"0\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"1\" \"1\" \"2\" \"3\" \"1\" \"3\" \"3\" \"3\" \"3\" \"0\" \"0\" \"1\" \"3\" \"2\" \"3\" \"1\" \"0\" \"1\" \"3\"\n [67] \"3\" \"3\" \"0\" \"1\" \"3\" \"3\" \"0\" \"0\" \"3\" \"3\" \"1\" \"3\" \"3\" \"3\" \"3\" \"1\" \"0\" \"0\" \"3\" \"3\" \"3\" \"3\" \"3\" \"3\" \"1\" \"2\" \"3\" \"0\" \"3\" \"2\" \"1\" \"3\" \"3\"\n[100] \"3\" \"1\" \"1\" \"0\" \"3\" \"3\" \"1\" \"0\" \"2\" \"3\" \"3\" \"1\" \"3\" \"2\" \"0\" \"3\" \"3\" \"3\" \"3\" \"0\" \"3\"\n",
        "> ",
        "matches_clean<-transform(matches_clean, set_home = as.numeric(set_home), ",
        "+ ",
        "               set_away = as.numeric(set_away))",
        "> ",
        "matches_clean <- matches_clean[, .(set_home_win=set_home-set_away)]",
        "\nRestarting R session...\n\n"
    ]
}