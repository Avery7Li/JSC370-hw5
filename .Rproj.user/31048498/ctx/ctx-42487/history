players <- data.table::fread("../data/players.csv")
players <- data.table::fread("data/players.csv")
players <- data.table::fread("data/players.csv")
player_rank <- data.table::fread("data/player_rank.csv")
team_rank <- data.table::fread("data/team_rank.csv")
team_in_order <- team_rank[, team_full]
team_abr_in_order <- team_rank[, team]
team_abr_in_order
players <- merge(x=players,
y=team_rank[, .(team, team_full)], by='team')
transform(players,
team_full=factor(team_full, levels=team_in_order))%>%
plot_ly(y=~age, color=~team_full, type="box") %>%
layout(title= "Player Ages in the Teams",
yaxis = list(title="Age"),
xaxis = list(title="Team"),
hovermode="compare")
library(data.table)
library(dplyr)
library(leaflet)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(mgcv)
library(kableExtra)
library("GGally")
library(AICcmodavg)
library(plotly)
library(widgetframe)
library(knitr)
opts_chunk$set(
warning = FALSE,
message = FALSE,
eval=TRUE,
echo = FALSE,
cache=FALSE,
include=TRUE)
players <- data.table::fread("data/players.csv")
player_rank <- data.table::fread("data/player_rank.csv")
team_rank <- data.table::fread("data/team_rank.csv")
team_in_order <- team_rank[, team_full]
team_abr_in_order <- team_rank[, team]
team_abr_in_order
players <- merge(x=players,
y=team_rank[, .(team, team_full)], by='team')
#library("RColorBrewer")
#players <- mutate(players, players.col = factor(position, label = brewer.pal(n = 5, name = "Set2")))
players <- mutate(players, players.col = factor(position, label = c("red", "yellow", "green", "blue", "orange")))
players %>%
plot_ly(x= ~spike_height, y=~total_score, type="scatter", mode="markers", size=~total_selections, sizes=c(5, 70), marker=list(color=~players.col, sizemode='diameter', opacity=0.5),
hover_info ="text", text = ~paste(paste0("Name: ", name),
paste0("Team: ", team),
paste0("Position: ", position),
paste0("Total Selections: ", total_selections),
sep = "<br>"),
transforms = list(
list(
type = 'filter',
target = ~team,
operation = 'in',
value = team_abr_in_order
))
) %>%
layout(title= "Scatterplots of Total Score vs Spike Height",
yaxis = list(title="Total Score"),
xaxis = list(title="Spike Height"),
hovermode="compare",
updatemenus = list(
list(
y = 0.8,
buttons = list(
#list(method = "restyle",
#     args = list("transforms[0].value", list(team_abr_in_order)),
#     label = "ALL"),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[1]),
label = paste0("1. ", team_in_order[1])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[2]),
label = paste0("2. ", team_in_order[2])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[3]),
label = paste0("3. ", team_in_order[3])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[4]),
label = paste0("4. ", team_in_order[4])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[5]),
label = paste0("5. ", team_in_order[5])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[6]),
label = paste0("6. ", team_in_order[6])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[7]),
label = paste0("7. ", team_in_order[7])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[8]),
label = paste0("8. ", team_in_order[8])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[9]),
label = paste0("9. ", team_in_order[9])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[10]),
label = paste0("10. ", team_in_order[10])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[11]),
label = paste0("11. ", team_in_order[11])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[12]),
label = paste0("12. ", team_in_order[12])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[13]),
label = paste0("13. ", team_in_order[13])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[14]),
label = paste0("14. ", team_in_order[14])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[15]),
label = paste0("15. ", team_in_order[15])),
list(method = "restyle",
args = list("transforms[0].value", team_abr_in_order[16]),
label = paste0("16. ", team_in_order[16])))))
)
scatter_top_player <- transform(player_rank,
team_full=factor(team_full, levels=rev(team_in_order)))[rank <= 10] %>%
ggplot(aes(x=rank, y=team_full, shape=position, color=skill)) +
geom_point() +
scale_x_continuous(breaks=seq(1,10))+
theme_light() +
guides(size="none") +
#theme(axis.ticks.y=paste(rank_all$team_rank, rank_all$team_full))
scale_color_brewer(palette = "Set2") +
labs(title="Composition of Top 10 Players with 4 Tactical Skills By Teams",
x="Player Skill Rank", y="Team")
ggplotly(scatter_top_player)
transform(players,
team_full=factor(team_full, levels=team_in_order))%>%
plot_ly(y=~age, color=~team_full, type="box") %>%
layout(title= "Player Ages in the Teams",
yaxis = list(title="Age"),
xaxis = list(title="Team"),
hovermode="compare")
players
transform(players,
team_full=factor(team_full, levels=team_in_order))%>%
plot_ly(y=~total_selections, color=~team_full, type="box") %>%
layout(title= "Player Number of Selections",
yaxis = list(title="Age"),
xaxis = list(title="Team"),
hovermode="compare")
matches <- data.table::fread("data/round_robin.csv")
library(stringr)
matches
matches$team_home <- sapply(strsplit(as.character(matches$teams),'-'), "[", 1)
matches
matches$set_home_win <- matches$set_home - matches$set_away
matches$set_away_win <- matches$set_away - matches$set_home
matches
matches$team_home <- sapply(strsplit(as.character(matches$teams),'-'), "[", 1)
matches$team_away <- sapply(strsplit(as.character(matches$teams),'-'), "[", 2)
matches$set_home <- sapply(strsplit(as.character(matches$sets),'-'), "[", 1)
matches$set_away <- sapply(strsplit(as.character(matches$sets),'-'), "[", 2)
matches$set_home_win <- matches$set_home - matches$set_away
m <- matches[, .(team_home=sapply(strsplit(as.character(matches$teams),'-'), "[", 1))]
m
library(dplyr)
library(dplyr)
library(data.table)
library(dplyr)
library(leaflet)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(mgcv)
library(kableExtra)
library("GGally")
library(AICcmodavg)
# Helper functions
# Slice from end of the string
slice_back <- function(s, n) {
sub = substr(s, nchar(s)-n+1, nchar(s))
return(sub)
}
# Mode
fmode <- function(x) unique(x)[which.max(table(x))]
# Position order constant
position_levels <- c("Opposite Spiker", "Outside Hitter", "Middle Blocker",
"Setter", "Libero")
# Read in the player and team data
scorers <- data.table::fread("vnl_2019/best-scorers.csv")
spikers <- data.table::fread("vnl_2019/best-spikers.csv")
diggers <- data.table::fread("vnl_2019/best-diggers.csv")
setters <- data.table::fread("vnl_2019/best-setters.csv")
receivers <- data.table::fread("vnl_2019/best-receivers.csv")
blockers <- data.table::fread("vnl_2019/best-blockers.csv")
bio <- data.table::fread("vnl_2019/player_bio.csv")
team_rank <- data.table::fread("vnl_2019/team_rank.csv")
round_robin <- data.table::fread("vnl_2019/round_robin.csv")
## bio
# Rename ambiguous columns before merging
setnames(bio, 'spike', 'spike_height')
setnames(bio, 'block', 'block_height')
setnames(bio, 'total', 'total_selections')
# Deal with outliers
boxplot(bio$spike_height, main='Boxplot of spike height')
bio[spike_height < 240]
nrow(bio[spike_height >= block_height]) / nrow(bio)
bio[, spike_height := fifelse(spike_height < 150, block_height, spike_height)]
# Only one player has a universal position, replace with the most occurred position
bio[position == 'Universal']
bio[, position := fifelse(position == 'Universal', fmode(position), position)]
# Make position name consistent
bio[, position := fifelse(position == 'Middle blocker',
'Middle Blocker',
fifelse(position == 'Opposite spiker',
'Opposite Spiker', position))]
## Create numerical variables - bmi, world_game, age
bio[, bmi := round(weight / (height/100)**2, 1)]
bio[, world_selection := world_championships + olympic_games]
# Take the last four char from birth date and convert to int as birth year
bio[, birth_year := strtoi(slice_back(birthdate, 4))]
# Calculate age
bio[, age:= 2019 - birth_year]
# Create a indicator for captain: name has '\nc' at the end
bio[, is_captain := fifelse(slice_back(name, 2) == '\nc', 1, 0)]
# Remove char from end of name
bio[, name := gsub("\nc", "", name)]
# Keep only relevant columns
## scorers
# Rename columns
setnames(scorers, 'total', 'total_score')
setnames(scorers, 'rank', 'score_rank')
# Drop column that's not interesting
scorers <- scorers[, !"shirtnumber"]
# Merge player scores with bio
# look for association between players' individual scores and their ability
players <- merge(x = bio[, .(name, team, position, age, height, weight, bmi,
spike_height, block_height,
total_selections, is_captain)],
y = scorers,
all.x = T, all.y = F,
by=c("name", 'team'))
## Best players
# Rename
setnames(diggers, 'average_per_set', 'digs_per_set')
setnames(setters, 'average_per_set', 'sets_per_set')
setnames(spikers, 'success_%', 'attack_success_rate')
# Merge with player dataset
players <- merge(x = players,
y = diggers[, .(name, digs_per_set)],
all.x = T, all.y = F,
by="name")
players <- merge(x = players,
y = setters[, .(name, sets_per_set)],
all.x = T, all.y = F,
by="name")
players <- merge(x = players,
y = spikers[, .(name, attack_success_rate)],
all.x = T, all.y = F,
by="name")
# Check row number doesn't change so no players have the same name
print(nrow(players) == nrow(bio))
# Check for NAs
players[is.na(digs_per_set) & is.na(sets_per_set) &
is.na(attack_success_rate) & is.na(total_score), .N]
players <- players[!(is.na(digs_per_set) & is.na(sets_per_set) &
is.na(attack_success_rate) & is.na(total_score))]
players[is.na(total_score), .N]   # 43
# Impute missing values
players <- players %>%
group_by(position) %>%
mutate(
total_score = coalesce(total_score, round(mean(total_score, na.rm=TRUE))),
digs_per_set = coalesce(digs_per_set, round(mean(digs_per_set, na.rm=TRUE))),
sets_per_set = coalesce(sets_per_set, round(mean(sets_per_set, na.rm=TRUE)))
#attack_success_rate = coalesce(attack_success_rate,
#                               round(mean(attack_success_rate, na.rm=TRUE)))
)
players <-data.table(players)
## Team
# Rename team rank
setnames(team_rank, 'rank', 'team_rank')
# Merge team info together with player info
team_players <- merge(x=team_rank[, .(team, team_rank, match_win,
set_ratio, team_full)],
y=players[, .(name, team, age, position, height,
total_selections, total_score,
digs_per_set, sets_per_set,
attack_success_rate)],
all.x = T, all.y = T,
by='team')
## Top players
rank_all <- rbind(spikers[, .(name, rank, skill = "Attack", value=attack_success_rate)],
setters[, .(name, rank, skill = "Set", value=sets_per_set)],
diggers[, .(name, rank, skill = "Dig", value=digs_per_set)],
#receivers[, .(name, rank, skill = "Receive", value=`efficiency_%`)],
blockers[, .(name, rank, skill = "Block", value=average_per_set)])
rank_all <- merge(x=rank_all,
y=bio[, .(team, name, position, is_captain)],
all.x=T, all.y=F, by='name')
rank_all <- merge(x=rank_all,
y=team_rank[, .(team_rank, team_full, team)],
all.x=T, all.y=F, by='team')
pwd()
pwd
matches_clean <- matches[, .(team_home=sapply(strsplit(as.character(matches$teams),'-'), "[", 1),
team_away=sapply(strsplit(as.character(matches$teams),'-'), "[", 2),
set_home=sapply(strsplit(as.character(matches$sets),'-'), "[", 1),
set_away=sapply(strsplit(as.character(matches$sets),'-'), "[", 2))]
transform(matches_clean, set_home = as.numeric(set_home),
set_away = as.numeric(set_away))
matches_clean
matches_clean <- matches_clean[, .(set_home_win=set_home-set_away)]
matches_clean$set_home_win <- matches_clean$set_home - matches_clean$set_away
matches_clean$set_home
matches_clean<-transform(matches_clean, set_home = as.numeric(set_home),
set_away = as.numeric(set_away))
matches_clean <- matches_clean[, .(set_home_win=set_home-set_away)]
