---
title: "JSC370 Homework 5 - Interactive Visualization"
output: 
  html_document:
    toc:TRUE
    toc_float:TRUE
---

```{r library import, include=FALSE}
library(data.table)
library(dplyr)
library(leaflet)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(mgcv)
library(kableExtra)
library("GGally")
library(AICcmodavg)
library(plotly)
library(widgetframe)
library(knitr)
library(stringr)

opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  eval=TRUE,
  echo = FALSE,
  cache=FALSE,
  include=TRUE)
```

```{r load processed data, include=FALSE}
# Pre-processed data from the midterm project
players <- data.table::fread("data/players.csv")

matches <- data.table::fread("data/round_robin.csv")
player_rank <- data.table::fread("data/player_rank.csv")
team_rank <- data.table::fread("data/team_rank.csv")
team_in_order <- team_rank[, team_full]
team_abr_in_order <- team_rank[, team]
team_abr_in_order
players <- merge(x=players,
                 y=team_rank[, .(team, team_full)], by='team')
```
## Competition Overview

```{r}
cv_states_mat <- cv_states %>%
  select(state, date, new_cases) %>%
  filter (date > "2021-07-01")

cv_states_mat2 <- as.data.frame(pivot_wider(cv_states_mat, names_from=state, values_from=new_cases))
cv_states_mat2 <- cv_states_mat2 %>% column_to_rownames("date") %>%
  as.matrix() 

plot_ly(x=colnames(cv_states_mat2), y=rownames(cv_states_mat2), z=~cv_states_mat2, type="heatmap")
str_split_fixed(before$type, "_and_", 2)
matches$team_home <- sapply(strsplit(as.character(matches$teams),'-'), "[", 1)
matches$team_away <- sapply(strsplit(as.character(matches$teams),'-'), "[", 2)
matches$set_home <- sapply(strsplit(as.character(matches$sets),'-'), "[", 1)
matches$set_away <- sapply(strsplit(as.character(matches$sets),'-'), "[", 2)

matches_clean <- matches[, .(team_home=sapply(strsplit(as.character(matches$teams),'-'), "[", 1),
                 team_away=sapply(strsplit(as.character(matches$teams),'-'), "[", 2),
                 set_home=sapply(strsplit(as.character(matches$sets),'-'), "[", 1),
                 set_away=sapply(strsplit(as.character(matches$sets),'-'), "[", 2))]
matches_clean<-transform(matches_clean, set_home = as.numeric(set_home), 
                          set_away = as.numeric(set_away))
matches_clean <- matches_clean[, .(set_home_win=set_home-set_away)]
matches_clean$set_home_win <- matches_clean$set_home - matches_clean$set_away
matches$set_away_win <- matches$set_away - matches$set_home
```


## Player Spike Height and Scores

```{r 1 scatterplot of height and score plot_ly, warning=FALSE}
players <- mutate(players, players.col = factor(position, label = c("red", "yellow", "green", "blue", "orange")))

players %>%
  plot_ly(x= ~spike_height, y=~total_score, type="scatter", mode="markers", size=~total_selections, sizes=c(5, 70), marker=list(color=~players.col, sizemode='diameter', opacity=0.5),
          hover_info ="text", text = ~paste(paste0("Name: ", name),
                                            paste0("Team: ", team),
                                            paste0("Position: ", position),
                                            paste0("Total Selections: ", total_selections),
                                            
                                            sep = "<br>"),
          transforms = list(
            list(
              type = 'filter',
              target = ~team,
              operation = 'in',
              value = team_abr_in_order
            ))
          ) %>%
  layout(title= "Scatterplots of Total Score vs Spike Height",
         yaxis = list(title="Total Score"),
         xaxis = list(title="Spike Height"),
         hovermode="compare",
         updatemenus = list(
          list(
            y = 0.8,
            buttons = list(
              #list(method = "restyle",
              #     args = list("transforms[0].value", list(team_abr_in_order)),
              #     label = "ALL"),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[1]),
                   label = paste0("1. ", team_in_order[1])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[2]),
                   label = paste0("2. ", team_in_order[2])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[3]),
                   label = paste0("3. ", team_in_order[3])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[4]),
                   label = paste0("4. ", team_in_order[4])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[5]),
                   label = paste0("5. ", team_in_order[5])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[6]),
                   label = paste0("6. ", team_in_order[6])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[7]),
                   label = paste0("7. ", team_in_order[7])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[8]),
                   label = paste0("8. ", team_in_order[8])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[9]),
                   label = paste0("9. ", team_in_order[9])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[10]),
                   label = paste0("10. ", team_in_order[10])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[11]),
                   label = paste0("11. ", team_in_order[11])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[12]),
                   label = paste0("12. ", team_in_order[12])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[13]),
                   label = paste0("13. ", team_in_order[13])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[14]),
                   label = paste0("14. ", team_in_order[14])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[15]),
                   label = paste0("15. ", team_in_order[15])),
              list(method = "restyle",
                   args = list("transforms[0].value", team_abr_in_order[16]),
                   label = paste0("16. ", team_in_order[16])))))
    )
```


## Top 10 Players Across Skills

```{r}
scatter_top_player <- transform(player_rank,
          team_full=factor(team_full, levels=rev(team_in_order)))[rank <= 10] %>%
  ggplot(aes(x=rank, y=team_full, shape=position, color=skill)) + 
  geom_point() +
  scale_x_continuous(breaks=seq(1,10))+
  theme_light() +
  guides(size="none") +
  #theme(axis.ticks.y=paste(rank_all$team_rank, rank_all$team_full))
  scale_color_brewer(palette = "Set2") +
  labs(title="Composition of Top 10 Players with 4 Tactical Skills By Teams", 
       x="Player Skill Rank", y="Team")
ggplotly(scatter_top_player)
```

## Player Prior Experience {.tabset}

### Ages
```{r}
transform(players,
          team_full=factor(team_full, levels=team_in_order))%>%
  plot_ly(y=~age, color=~team_full, type="box") %>%
  layout(title= "Player Ages in the Teams",
         yaxis = list(title="Age"),
         xaxis = list(title="Team"),
         hovermode="compare")
  
```

### Number of Selections

```{r}
transform(players,
          team_full=factor(team_full, levels=team_in_order))%>%
  plot_ly(y=~total_selections, color=~team_full, type="box") %>%
  layout(title= "Player Number of Selections",
         yaxis = list(title="Age"),
         xaxis = list(title="Team"),
         hovermode="compare")
  
```

```{r alt3 team age box, eval=FALSE, include=FALSE}
p3 <- players %>%
  ggplot() + 
    aes(y = age, x = team, fill = age) +
    geom_boxplot() +
    scale_fill_brewer(palette = "Set2") +
    labs(title="Distribution of Player Age in Teams",
         x="Team", y="Age") +
    theme_light()
ggplotly(p3)
```

```{r alt1 scatterplot of height and score, eval=FALSE, include=FALSE}
#transform(players,
#          position=factor(position, levels=position_levels))%>%
scatter_score_height <- players %>%
  ggplot() +
#  aes(x = spike_height, y = total_score, color=team, shape=position, size=total_selections, alpha=0.5) +
  aes(x = spike_height, y = total_score, color=position, size=total_selections, alpha=0.5) +
  geom_jitter() +
  labs(title="Scatterplots of Total Score vs Spike Height by Position",
       x="Spike Height", y="Total Score") + 
  guides(color = 'none', alpha = 'none') +
  theme_light() + 
  scale_color_brewer(palette = "Set2")

ggplotly(scatter_score_height)
```